process HLTMuonOfflineAnalysis  = {


#----------------- Input file ---------RAW+HLT file-----------------------
  untracked PSet maxEvents = {untracked int32 input = -1}
  source = PoolSource{
    untracked uint32 skipEvents=0
    untracked vstring fileNames ={
'file:ZmumuStartup/4A3DAF35-E533-DD11-9D80-001617E30F56.root',
'file:ZmumuStartup/4C567E3C-E533-DD11-901D-000423D99F3E.root',
'file:ZmumuStartup/6EC2CB33-E533-DD11-9CFA-000423D944F0.root',
'file:ZmumuStartup/74AF1646-E533-DD11-84EC-001617DBD556.root',
'file:ZmumuStartup/7CFE4AAD-E833-DD11-8E44-001617E30D40.root',
'file:ZmumuStartup/84D7FA33-E533-DD11-9334-000423D986C4.root',
'file:ZmumuStartup/9685E295-E533-DD11-A07D-000423D987FC.root',
'file:ZmumuStartup/9C28F593-E533-DD11-997C-000423D98BE8.root',
'file:ZmumuStartup/C6E80E36-E533-DD11-9C52-000423D99394.root',
'file:ZmumuStartup/EA426746-E533-DD11-BEEB-001617C3B6C6.root',
'file:ZmumuStartup/FA1DBD3C-E533-DD11-93DF-000423D952C0.root'
    }
  }
 module filter = MCSingleParticleFilter {
   untracked vint32 ParticleID={-13,13}
   untracked vdouble MinPt={5,5}
   untracked vdouble MaxEta={2.1,2.1}
   untracked vdouble MinEta={-2.1,-2.1}
 }

 module dump = EventContentAnalyzer{}

#------------ Efficiency/Rate Analyzer --------------------------------
 
  module RateAnalyzer = MuonTriggerRateTimeAnalyzer {
      untracked bool DQMStore = true
      untracked string RootFileName = "ZmumuAnalyzer_210pre5_filterSTARTUP.root"
      bool UseMuonFromGenerator=true
      untracked InputTag GenLabel=source
      bool UseMuonFromReco=true
      untracked InputTag RecoLabel=globalMuons
      double MaxTime=150.
      uint32 TimeNbins=150
      InputTag TimerLabel = hltTimer
      InputTag TriggerResultLabel=TriggerResults::HLT
      untracked PSet TimingModules={
      untracked vstring MuonDigiModules = {"muonCSCDigis","muonDTDigis","muonRPCDigis"}
      untracked vstring CaloDigiModules = {"ecalDigis","ecalPreshowerDigis","hcalDigis"}
      untracked vstring TrackerDigiModules = {"siPixelDigis","siStripDigis"}
      untracked vstring MuonLocalRecModules = {"dt1DRecHits","dt4DSegments","rpcRecHits","csc2DRecHits","cscSegments"}
      untracked vstring MuonL2RecModules = {"hltL2MuonSeeds","hltL2Muons","hltL2MuonCandidates","SingleMuIsoL2PreFiltered"}
      untracked vstring CaloRecModules = {"ecalRegionalMuonsWeightUncalibRecHit","ecalRegionalMuonsRecHit","ecalPreshowerRecHit","hbhereco","horeco","hfreco","towerMakerForMuons","caloTowersForMuons"}
      untracked vstring MuonL2IsoModules = {"hltL2MuonIsolations","SingleMuIsoL2IsoFiltered"}
      untracked vstring TrackerRecModules = {"siPixelClusters","siPixelRecHits","siStripClusters","siStripMatchedRecHits"}
      untracked vstring MuonL3RecModules = {"hltL3Muons","hltL3MuonCandidates","SingleMuIsoL3PreFiltered"}
      untracked vstring MuonL3IsoModules = {"pixelTracks","hltL3MuonIsolations","SingleMuIsoL3IsoFiltered"}	
      }
      VPSet TriggerCollection = {
      	 {
          InputTag L1CollectionLabel = hltSingleMuIsoL1Filtered::HLT
          VInputTag HLTCollectionLabels = {   
            hltSingleMuIsoL2PreFiltered::HLT, hltSingleMuIsoL2IsoFiltered::HLT
          , hltSingleMuIsoL3PreFiltered::HLT, hltSingleMuIsoL3IsoFiltered::HLT
         }	  
     	  double L1ReferenceThreshold = 7.
     	  double HLTReferenceThreshold = 7.
	  uint32 NumberOfObjects = 1
         },
      	 {
          InputTag L1CollectionLabel = hltSingleMuNoIsoL1Filtered::HLT
          VInputTag HLTCollectionLabels = {   
            hltSingleMuNoIsoL2PreFiltered::HLT, hltSingleMuNoIsoL3PreFiltered::HLT 
          }	  
     	  double L1ReferenceThreshold = 7.
     	  double HLTReferenceThreshold = 7.
	  uint32 NumberOfObjects = 1
         },
      	 {
          InputTag L1CollectionLabel = hltDiMuonNoIsoL1Filtered::HLT
          VInputTag HLTCollectionLabels = {   
            hltDiMuonNoIsoL2PreFiltered::HLT, hltDiMuonNoIsoL3PreFiltered::HLT
         }	  
     	  double L1ReferenceThreshold = 3.
     	  double HLTReferenceThreshold = 7.
	  uint32 NumberOfObjects = 2
         },
      	 {
          InputTag L1CollectionLabel = hltDiMuonIsoL1Filtered::HLT
          VInputTag HLTCollectionLabels = {   
            hltDiMuonIsoL2PreFiltered::HLT,hltDiMuonIsoL2IsoFiltered::HLT,
	    hltDiMuonIsoL3PreFiltered::HLT,hltDiMuonIsoL3IsoFiltered::HLT
         }	  	
     	  double L1ReferenceThreshold = 3.
     	  double HLTReferenceThreshold = 3.
	  uint32 NumberOfObjects = 2
         },
      	 {
          InputTag L1CollectionLabel = hltJpsiMML1Filtered::HLT
          VInputTag HLTCollectionLabels = {   
            hltJpsiMML2Filtered::HLT,hltJpsiMML3Filtered::HLT
         }	  	
     	  double L1ReferenceThreshold = 3.
     	  double HLTReferenceThreshold = 3.
	  uint32 NumberOfObjects = 2
         },
      	 {
          InputTag L1CollectionLabel = hltZMML1Filtered::HLT
          VInputTag HLTCollectionLabels = {   
            hltZMML2Filtered::HLT,hltZMML3Filtered::HLT
         }	  	
     	  double L1ReferenceThreshold = 3.
     	  double HLTReferenceThreshold = 3.
	  uint32 NumberOfObjects = 2
         },
      	 {
          InputTag L1CollectionLabel = hltSingleMuPrescale3L1Filtered::HLT 
          VInputTag HLTCollectionLabels = {
           hltSingleMuPrescale3L2PreFiltered::HLT,
	   hltSingleMuPrescale3L3PreFiltered::HLT
	  } 
     	  double L1ReferenceThreshold = 3.
     	  double HLTReferenceThreshold = 3.
	  uint32 NumberOfObjects = 1
         },
      	 {
          InputTag L1CollectionLabel = hltSingleMuPrescale5L1Filtered::HLT 
          VInputTag HLTCollectionLabels = {
           hltSingleMuPrescale5L2PreFiltered::HLT,
	   hltSingleMuPrescale5L3PreFiltered::HLT
	  } 
     	  double L1ReferenceThreshold = 3.
     	  double HLTReferenceThreshold = 3.
	  uint32 NumberOfObjects = 1
         },
      	 {
          InputTag L1CollectionLabel = hltSingleMuPrescale77L1Filtered::HLT 
          VInputTag HLTCollectionLabels = {
           hltSingleMuPrescale77L2PreFiltered::HLT,
	   hltSingleMuPrescale77L3PreFiltered::HLT
	  } 
     	  double L1ReferenceThreshold = 7.
     	  double HLTReferenceThreshold = 5.
	  uint32 NumberOfObjects = 1
         },
      	 {
          InputTag L1CollectionLabel = hltSingleMuPrescale1710L1Filtered::HLT 
          VInputTag HLTCollectionLabels = {
           hltSingleMuPrescale710L2PreFiltered::HLT,
	   hltSingleMuPrescale710L3PreFiltered::HLT
	  } 
     	  double L1ReferenceThreshold = 7.
     	  double HLTReferenceThreshold = 7.
	  uint32 NumberOfObjects = 1
         },
      	 {
          InputTag L1CollectionLabel = hltMuLevel1PathL1Filtered::HLT 
          VInputTag HLTCollectionLabels = {}      	  
          double L1ReferenceThreshold = 3.
     	  double HLTReferenceThreshold = 3.
	  uint32 NumberOfObjects = 1
         }
      }
      # Shift to go to 90% efficiency pt values (in number of sigmas for 1/pt) 
      # ORCA values: 3.9 sigmas for L2; 2.2 sigmas for L3
       untracked vdouble NSigmas90 = { 3., 3., 3., 3. }

      # CrossSection (in nb) = generator cross section * filter efficiency
#      double CrossSection = 79300000
      double CrossSection = .97

      # Luminosity (in 1/cm**2/s units)
      untracked double Luminosity = 1.e32

      # Parameters defining histogram limits and number of bins
      untracked double PtMin = 0.0
      untracked double PtMax = 40.0
      untracked uint32 Nbins = 40

      # Output Root file for histograms
  }

#------------ Message Logger ------------------------------------------
   service = MessageLogger {
    untracked vstring destinations = { "cout","HLTMuonVal.log" }
    untracked vstring categories =  {  "HLTMuonVal" }
    untracked vstring debugModules =  { "RateAnalyzer" }   
    untracked PSet HLTMuonVal.log = {untracked string threshold = "INFO"
                                   untracked PSet default = { untracked  int32 limit = 0 }
                                   untracked PSet HLTMuonVal  = { untracked int32 limit = 100000}
    }
    untracked PSet cout = { untracked string threshold = "WARNING" } 
   }

#------------ End path ------------------------------------------------

  path analyzerpath = {filter,RateAnalyzer}
}
